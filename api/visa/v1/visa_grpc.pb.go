// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/visa/v1/visa.proto

package visav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VisaService_GetVisa_FullMethodName    = "/api.visa.v1.VisaService/GetVisa"
	VisaService_CreateVisa_FullMethodName = "/api.visa.v1.VisaService/CreateVisa"
)

// VisaServiceClient is the client API for VisaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisaServiceClient interface {
	GetVisa(ctx context.Context, in *GetVisaRequest, opts ...grpc.CallOption) (*GetVisaResponse, error)
	CreateVisa(ctx context.Context, in *CreateVisaRequest, opts ...grpc.CallOption) (*CreateVisaResponse, error)
}

type visaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisaServiceClient(cc grpc.ClientConnInterface) VisaServiceClient {
	return &visaServiceClient{cc}
}

func (c *visaServiceClient) GetVisa(ctx context.Context, in *GetVisaRequest, opts ...grpc.CallOption) (*GetVisaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVisaResponse)
	err := c.cc.Invoke(ctx, VisaService_GetVisa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visaServiceClient) CreateVisa(ctx context.Context, in *CreateVisaRequest, opts ...grpc.CallOption) (*CreateVisaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVisaResponse)
	err := c.cc.Invoke(ctx, VisaService_CreateVisa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisaServiceServer is the server API for VisaService service.
// All implementations must embed UnimplementedVisaServiceServer
// for forward compatibility.
type VisaServiceServer interface {
	GetVisa(context.Context, *GetVisaRequest) (*GetVisaResponse, error)
	CreateVisa(context.Context, *CreateVisaRequest) (*CreateVisaResponse, error)
	mustEmbedUnimplementedVisaServiceServer()
}

// UnimplementedVisaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVisaServiceServer struct{}

func (UnimplementedVisaServiceServer) GetVisa(context.Context, *GetVisaRequest) (*GetVisaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisa not implemented")
}
func (UnimplementedVisaServiceServer) CreateVisa(context.Context, *CreateVisaRequest) (*CreateVisaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVisa not implemented")
}
func (UnimplementedVisaServiceServer) mustEmbedUnimplementedVisaServiceServer() {}
func (UnimplementedVisaServiceServer) testEmbeddedByValue()                     {}

// UnsafeVisaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisaServiceServer will
// result in compilation errors.
type UnsafeVisaServiceServer interface {
	mustEmbedUnimplementedVisaServiceServer()
}

func RegisterVisaServiceServer(s grpc.ServiceRegistrar, srv VisaServiceServer) {
	// If the following call pancis, it indicates UnimplementedVisaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VisaService_ServiceDesc, srv)
}

func _VisaService_GetVisa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisaServiceServer).GetVisa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisaService_GetVisa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisaServiceServer).GetVisa(ctx, req.(*GetVisaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisaService_CreateVisa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisaServiceServer).CreateVisa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisaService_CreateVisa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisaServiceServer).CreateVisa(ctx, req.(*CreateVisaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VisaService_ServiceDesc is the grpc.ServiceDesc for VisaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.visa.v1.VisaService",
	HandlerType: (*VisaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVisa",
			Handler:    _VisaService_GetVisa_Handler,
		},
		{
			MethodName: "CreateVisa",
			Handler:    _VisaService_CreateVisa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/visa/v1/visa.proto",
}
