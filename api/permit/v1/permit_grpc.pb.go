// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/permit/v1/permit.proto

package permitv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PermitService_GetPermit_FullMethodName   = "/api.permit.v1.PermitService/GetPermit"
	PermitService_IssuePermit_FullMethodName = "/api.permit.v1.PermitService/IssuePermit"
)

// PermitServiceClient is the client API for PermitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermitServiceClient interface {
	GetPermit(ctx context.Context, in *GetPermitRequest, opts ...grpc.CallOption) (*GetPermitResponse, error)
	IssuePermit(ctx context.Context, in *IssuePermitRequest, opts ...grpc.CallOption) (*IssuePermitResponse, error)
}

type permitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermitServiceClient(cc grpc.ClientConnInterface) PermitServiceClient {
	return &permitServiceClient{cc}
}

func (c *permitServiceClient) GetPermit(ctx context.Context, in *GetPermitRequest, opts ...grpc.CallOption) (*GetPermitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermitResponse)
	err := c.cc.Invoke(ctx, PermitService_GetPermit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permitServiceClient) IssuePermit(ctx context.Context, in *IssuePermitRequest, opts ...grpc.CallOption) (*IssuePermitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssuePermitResponse)
	err := c.cc.Invoke(ctx, PermitService_IssuePermit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermitServiceServer is the server API for PermitService service.
// All implementations must embed UnimplementedPermitServiceServer
// for forward compatibility.
type PermitServiceServer interface {
	GetPermit(context.Context, *GetPermitRequest) (*GetPermitResponse, error)
	IssuePermit(context.Context, *IssuePermitRequest) (*IssuePermitResponse, error)
	mustEmbedUnimplementedPermitServiceServer()
}

// UnimplementedPermitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermitServiceServer struct{}

func (UnimplementedPermitServiceServer) GetPermit(context.Context, *GetPermitRequest) (*GetPermitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermit not implemented")
}
func (UnimplementedPermitServiceServer) IssuePermit(context.Context, *IssuePermitRequest) (*IssuePermitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuePermit not implemented")
}
func (UnimplementedPermitServiceServer) mustEmbedUnimplementedPermitServiceServer() {}
func (UnimplementedPermitServiceServer) testEmbeddedByValue()                       {}

// UnsafePermitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermitServiceServer will
// result in compilation errors.
type UnsafePermitServiceServer interface {
	mustEmbedUnimplementedPermitServiceServer()
}

func RegisterPermitServiceServer(s grpc.ServiceRegistrar, srv PermitServiceServer) {
	// If the following call pancis, it indicates UnimplementedPermitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermitService_ServiceDesc, srv)
}

func _PermitService_GetPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServiceServer).GetPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermitService_GetPermit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServiceServer).GetPermit(ctx, req.(*GetPermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermitService_IssuePermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssuePermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServiceServer).IssuePermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermitService_IssuePermit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServiceServer).IssuePermit(ctx, req.(*IssuePermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermitService_ServiceDesc is the grpc.ServiceDesc for PermitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.permit.v1.PermitService",
	HandlerType: (*PermitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermit",
			Handler:    _PermitService_GetPermit_Handler,
		},
		{
			MethodName: "IssuePermit",
			Handler:    _PermitService_IssuePermit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/permit/v1/permit.proto",
}
